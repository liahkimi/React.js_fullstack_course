*리액트의 렌더링은 상태(State)나 속성(Props)이 변경되었을 때 동작합니다.

1> 컴포넌트와 컨테이너
	- 컴포넌트 : 프로젝트 내부의 가장 작은 단위 
		상태 : 리액트에서는 컴포넌트 하나 하나를 변경 할 수 있게 하기위해 상태를 가짐.
			-> 컴포넌트의 상태가 변경됨이 감지되면 기존것을 지우고 다시 그림
			-> 아토믹 패턴 : 성능 개선을 위해 컴포넌트를 잘게 쪼갬
	- 컨테이너 : 컴포넌트들이 모여 있는 곳
	=> 개발자들이 보기 쉽게 구분하기 위해 컴포넌트는 jsx파일형식으로 
		컨테이너는 js파일형식으로 쓰기도 한다.
2> 속성 (Props) = propertys
	- 태그 하나는 DOM으로 취급
	- DOM에서 속성 = Property => Property들이 모여있는 곳 => Props
	- Jsx문법에서 전달 할 수 있는 속성들을 Props라고 부른다. (태그의 속성들)

*컨테이너에서 속성들을 전달해서 컴포넌트로 값을 전달했을때 ,
변경된 값만 컴포넌트로 보여주면 컴포넌트를 재사용 할 수 있다. 
이 때 컨테이너의 값을 컴포넌트로 넘기는 방법이 Props로 넘기는 것.


3> 컨테이너에 있는 값을 => 컴포넌트로 넘기는 방법
	- 컨테이너에서 컴포넌트 태그에 속성처럼 값을 넣어준다.
	- 컴포넌트에서는 props 객체를 인자로 받아 쓰면 된다.

	const name = '김가은'
	return(
	<>
		<Component1 name={name}>
	</>
	)

	
4> 상태(State)  - 어떤게 바뀌었는지 검사하기 위함
	- 반복문으로 새로운 배열 리턴되거나 결과값이 새로 리턴되는 경우
	- 반복문중 map만 리액트에서 사용 가능 (리액트에서는 새로운 것을 감지해서 지웠다 그리므로)
		- forEach() : 주어진 함수를 각 배열 요소에 실행하고 그 결과를 무시함.
	  	- map() : 각 배열 요소에 주어진 함수를 실행한 결과를 새로운 배열로 반환한다.



5> key
	- 리액트에서 성능향상을 위해 1개의 DOM을 사용하는데,
	이 1개의 DOM에서 여러개의 컴포넌트 중,변경된 컴포넌트를 찾아가기 위해 key값이 필요 한 것.

	- 버츄얼돔으로부터 화면쪽에 바뀐것이 있는지 상태 검사할 때 
	바뀐 컴포넌트의 key값을 알아야 구분이 가능하므로.

	- map과 같은 반복문에서 겹치지 않는 고유의 key값 -> index 사용

	- key를 안써주면 아래와 같은 에러 뜸
	  Users.jsx:7 Warning: Each child in a list should have a unique "key" prop.
	  React에서 리스트를 렌더링할 때 각 항목에 고유한 식별자가 필요하기 때문


6> 리액트에 동기화기능 추가해주기 async
cd study //원하는 프로젝트 파일 내에,
yarn add react-async // Yarn 패키지 관리자를 사용하여 프로젝트에 react-async 패키지를 추가
package.json에 react-async 추가되었는지 확인
import {useAsync} from 'react-async'; // import 해줘서 라이브러리 사용하면 된다.
	-> react-async 모듈 안에 많은 객체들이 있어 비구조화할당으로 가져온다.


7> 리액트 비동기 동작 흐름
랜더링 -> 마운트(초기랜더링) -> 비동기 -> 상태:펜딩 -(상태변경)-> 상태:fulfilled
->리랜더링(상태변경 감지되어)->비동기 -> 상태:펜딩 -(상태변경)-> 상태:fulfilled
->리랜더링(상태변경 감지되어)->비동기 -> 상태:펜딩 -(상태변경)-> 상태:fulfilled
.....무한 반복

=> *비동기함수는 컴포넌트 안에서 사용하면 무한로딩에 빠짐 => 서버폭파..
=> 리액트 버전 업데이트 이후 해결된듯하여 잘 된다?! 일단 pass..
=> useEffect 추후 배운 후 학습 예정!

8> useState 상태관리 함수
- 0 +
	-JS에서는 0이라는 DOM에 addEventListener로 카운팅 할 수 있었지만
	- 리액트에서는 DOM의 상태가 바뀌어야만 화면 랜더링 가능하여 카운팅 가능

9> setter메서드 사용 (react방식)
    const increase = () =>{
        setNumber(number+1)
    }


























		