복습>
버추얼 돔 => 화면 띄우기
버추얼 돔 내부의 컴포넌트에 바뀐 부분이 있다면 지우고 다시 그린다.
그때의 상태관리는 useState가 관리한다. (바뀐 값이 있는지 관리)

- 컨테이너에서 컴포넌트로 돔(태그)의 props를 전달한다.


1> 리액트의 불변성과 state
- 홈페이지가 처음 마운트 되었을 때 그 값은 절대 바뀌면 안된다는 성질
- js querySelector나 getElementById처럼 dom에 접근해 값을 바꾸면 안됨
- 무조건 상태변경이 된 것만 다시 그려준다.

// 목적에 맞게 다 쓰기 때문에 언제 어떤걸 왜 써야하는지 익숙해 져야 함
props -> context -> Redux


2> Ref
button을 누르면 다른값을 참조해서 그 값을 바꿔야 할 때
document.querySelector()로 DOM에 직접 접근이 불가하니 리액트에서는 ref 를 만든것

3> useState와 useRef의 차이점

     useState 
     - React에서 컴포넌트는 자신의 상태 또는 props가 바뀌면 리렌더링되며, 상태를 관리하기 위해 React에서는 useState를 활용한다.
     - state는 컴포넌트의 생명 주기와 밀접한 연관이 있는 요소이므로 렌더링과 관련 없는 값을 저장하기에는 적합치 않다.

      useRef 
      - Ref는 render 메서드에서 생성된 DOM 노드나 React 엘리먼트에 접근하는 방법을 제공한다.
      - useRef로 만든 객체를 수정하는 것은 컴포넌트의 렌더링과 무관하다.
      - useRef는 .current 프로퍼티에 변경 가능한 값을 담고 있는 상자
      - ref는 렌더링과 관련이 없는 값을 저장하기에 적합하다.
		- setTimeout, setInterval이 반환하는 ID 값
		- 포커스, 텍스트 선택영역, 혹은 미디어의 재생을 관리할 때
		- 애니메이션을 직접적으로 실행시킬 때
		- 서드 파티 DOM 라이브러리를 React와 같이 사용할 때
		- 이 외 렌더링과 무관한 가변값
	
	"input 값을 변경할 때 렌더링이 필요한가?" <- 이런 질문을 던져가며 useState와 useRef의 사용목적에 맞게 써야 한다.

	[ 주의 ]
	- useRef 는 단순 DOM 엘리먼트를 지정하는데만 사용되지 않는다
	- useRef 를 통해 클래스의 멤버 변수와 비슷한 역할을 하게 만들 수 있다.
	- state 와 달리 값의 변화에 의한 리렌더링이 발생하지 않는다.
	- current 라는 속성을 통해 어느 값이든 보유할 수 있는 일종의 컨테이너 역할을 할 수 있다.



3> React.Fragment
리액트에서는 1개의 돔을 써야 하므로
<>
</> 
와 같이 의미 없는 태그로 감싸주는 것이 React.Fragment다.

추가적인 DOM 요소를 생성하지 않고 자식 요소를 그룹화하는 데 사용됩니다. 
예를 들어, 여러 요소를 렌더링하고자 할 때, 부모 요소가 없이는 그룹화할 수 없는 경우에 유용합니다.
React.Fragment를 사용하면 불필요한 div 등의 추가 DOM 요소를 생성하지 않고도 자식 요소를 그룹화할 수 있습니다. 
이는 특히 UI를 구성할 때 clean하고 성능을 향상시키는 데 도움이 됩니다.

key나 props를 넘겨줘야 할때는 아래처럼 fullname을 써줘야 함.
<React.Fragment>
</React.Fragment>


4> useRef로 dom에 접근하여 수정하면 상태가 변경이 되므로 state에도 영향을 끼치므로 동시에 변화된다.

5> 표기법 문법
컴포넌트명 : 파스칼 표기법 (맨앞문자 대문자로 시작)
js언어 : 카멜 표기법
케밥 표기법
스네이크 표기법
