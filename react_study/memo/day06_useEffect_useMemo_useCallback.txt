어떤 코드던, side-effect가 발생할 수 있다. 
이에 대해 성능을 끌어 올릴 수 있는 방법들 :    //하지만, 목적에 맞게 사용하자

1. useEffect
   - Side-Effect를 따로 관리하여 컴포넌트가 최대한 순수 함수를 유지할 수 있도록 도와주는 함수
   - useEffect()는 랜더링이 모두 끝난 다음에 실행된다.
   - ⭐사용 목적 공식 : side-effect 많이 발생하는 setInterval, setTimeout, fetch, axios 사용시

   가용 범위는?
   - 랜더링 될 때 마다 실행
   > useEffect(()=>{})

   - 최초 랜더링(마운트)될 때 실행
   > useEffect(()=>{}, [])

   - 특정 컴포넌트가 변경될 때 실행
   > useEffect(()=>{}, [state])

2. useMemo
    - 리액트에서 컴포넌트의 성능을 최적화하는데 사용하는 hook 함수다.
    - side effect가 발생하는 작은 변수들을 담아서 사용한다. (캐시에 정적으로 담아둔다.)
    - memoization된 값을 반환하는 useMemo는 특정 결과값을 재사용 할 때 사용한다.
    - ⭐사용시 주의 : 메모리의 할당량에 제한이 있으므로, 필요할 때만 사용해야한다. (리랜더링하기 싫다고, 성능 높이겠다고 막 쓰면 안됨.)
    - ⭐사용 목적 공식 : 캐시에 올려도 큰 부담이 없는 작은 값들

3. useCallback
    - memoization된 콜백함수, 즉 이미 생성된 함수를 반환하는 리액트의 hook함수다.
    - 실행 할 문장 또는 변화를 주는 기능(button 등..)을 제어하기 위해 사용한다. (해당 기능을 감싸야 한다.)
    - ⭐의존성 배열 값의 변화가 있을 때 콜백함수를 새로 생성하고, 그렇지 않을 경우 콜백함수를 생성하지 않는다.
    - ⭐사용 목적 공식 : 부모 -> 자식 프롭스 함수를 보낼 때 useCallback을 감싸서 보내자.(목적에 맞게 useCallback쓰기)

---------------------------------------------------------------------------------------------------------------
CSS styled와 FONT-AWESOME 설치방법 : 

npm i styled-components
npm i styled-reset
npm i @fortawesome/free-solid-svg-icons
npm i @fortawesome/react-fontawesome

확장 프로그램 설치: 
vscode-styled-components  

----------------------------------------------------------------------------------------------------------------
custom hook 패턴 구조 // 참조
[components]
[utils]
   - arrayheler.js
   - parseheler.js
[consts]
   - key.js (상수, 문자열)
[styles]
   - theme.js
   - globalStyle.js
   - common.js
   ...
[pages]
   [Home]
      [Hooks]  <-각 서비스의 hook함수
      [Components]
      -home.js
[routes]
[hooks]  <-공통 hook함수
... etc

// ==> 보통 이런 구조로 실무에서 만들어 씀.
// 프로젝트 시, 이런식으로 써보기. (To-do list 만들때 해보기로 함!!)