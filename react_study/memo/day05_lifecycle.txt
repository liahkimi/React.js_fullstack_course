클래스형 컴포넌트 : rcc / 함수형 컴포넌트 : rsc

리액트 라이프사이클
   페이지에 컴포넌트가 생성되고, 수정되고, 사라지는 순서를 의미한다.
   React에서 클래스 컴포넌트를 사용하면, 9개의 메서드를 통해
   작업의 흐름을 제어할 수 있다.

   - 전체적인 흐름
   마운트 → 업데이트 → 언마운트

마운트(mount)
   페이지에 컴포넌트가 나타나는 것
   
   - constructor : 새로운 컴포넌트를 생성할 때 마다 자동으로 호출되는 특별한 메서드
   - getDeriveStateFromProps : prop를 state에 넣을 때 사용한다. 
                              컴포넌트가 마운트 될 때 와 업데이트 될 때 실행된다.
                              virtual DOM에서 사용하는 메서드.
   - render : 준비해놓은 UI를 랜더링할 때 사용된다.
   - componentDidMount : 페이지에 컴포넌트가 나타난 후 실행된다.
      - ex.렌더링된 직후에 뭔가를 띄우고 싶을 때, setTimeout 사용하는 대신 componentDidMount메서드를 골라 사용하면 된다.


업데이트(update)
   - 1. props 값에 변화가 있을 때
   - 2. state 값에 변화가 있을 때
   - 3. 부모 컴포넌트가 리랜더링될 때 (자식 컴포넌트도 자동으로 리랜더링 된다.)
   - forceUpdate()를 사용해서 강제로 리랜더링을 할 때(사용X, 상태관리가 잘못된 구조다.)
      -> life-cycle의 구조로는 state를 바꾸면 될 일이다.
   -> 1, 2, 3에 따른 변화가 있을 때 아래가 실행이 된다.

   - render : 컴포넌트 리랜더링 
   - shouldComponentUpdate : 다음 라이프사이클 메서드로 이동할 지 멈출 지(unMount)를 결정한다. 
      - 언제 re-rendering을 시킬지 결정하는 메서드
      - true면 getSnapshotBeforeUpdate으로 이동, false면 unMount
   - getSnapshotBeforeUpdate : 컴포넌트 업데이트 직전에 실행 (직전값을 snapshot으로 남김)
   - componentDidUpdate : 컴포넌트 업데이트 직후에 실행
      - 혹시 이전상태로 되돌리고 싶을 때 componentDidUpdate에서 이전값이 필요하기에, getSnapshotBeforeUpdate가 있는 것!
      - ex.유저가 장바구니에 아이템을 넣었다가, 취소시킬때 본래값으로 돌아가야 하는 경우


언마운트(unmount)
   - 컴포넌트가 페이지에서 사라지는 것 
   - componentwillUnmount : 컴포넌트가 페이지에서 사라지기 직전에 실행된다.(복구에 대한 예방 차원)

실습 
부모 컴포넌트 - LifeCycleContainer.js - 색깔을 props로 넘겨주면
자식 컴포넌트 - LifeCycleComponent.jsx - 자식이 받아서 적용되는 과정 실습

*클래스형 컴포넌트에는 함수형 컴포넌트의 useState()개념이 없다.


-------------------------------------------------------------------------------------
1. 참조 투명성
   - 입력을 받아서 입력 받은 그대로를 출력하는 함수를 참조 투명이라고 하며, 순수 함수(pure function)라고 한다.
   그리고 입력을 받았을 때 다른 결과로 출력하거나 외부 함수에 영향을 끼치는 함수를 참조 불투명하다고 한다.
   이렇게 순수 함수가 아닌 함수에서 사이드이팩트(side-effect)가 발생할 수 있다.
   
   - 리액트는 모든 함수를 순수 함수로 유지할 것을 권장하고 있다. 
   이로 인해 컴포넌트 재사용이 좋아지고 오류 검사 및 테스트도 좋아진다.


2. Side-Effect
   - 함수 내 특정 동작이 함수 외부에 영향을 끼쳐, 프로그램 동작을 이해하기 어렵게 만드는 행위
   - settimeout, setinterval
      - 예측하기 어려운 함수, 종료 후 시점에서 어떤 작업을 하고 싶을 때
   - 서버 통신(fetch)로 통신을 할 때
      - 사용자가 요청했을 때 이후 또는 직전에 어떤 작업을 하고 싶을 경우

