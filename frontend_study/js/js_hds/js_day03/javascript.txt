자바스크립트(Javascript)
	컴파일 과정 없이 브라우저 내부의 자바스크립트 처리기(인터프리터)에 의해 바로 실행된다.
	※ 개발이 발전됨에 따라 컴파일 과정이 가능해졌으며, Node.js로 서버환경을 구축할 수 있다.

웹 페이지에서 자바스크립트의 역할
	웹 페이지는 3가지(HTML, CSS, JS)코드가 결합되어 작성된다.
	자바스크립트는 사용자의 입력을 처리하거나 웹 애플리케이션을 작성하는 등
	웹 페이지의 동적 제어에 사용된다.

	- 사용자의 입력 및 연산
		키, 마우스 등의 입력과 연산은 오직 자바스크립트로만 처리가 가능하다.

	- 웹 페이지 내용 및 모양의 동적 제어
		HTML 태그의 속성이나 콘텐츠, CSS 속성 값을 변경해서
		웹 페이지의 동적인 변화를 일으키는 데에 활용된다.

	- 브라우저 제어
		브라우저 윈도우의 크기나 모양 변경, 새 윈도우나 탭 열기, 다른 웹사이트 접속,
		브라우저의 히스토리 제어 등 브라우저의 작동을 제어하는 데 활용된다.

	- 웹 서버와의 통신
		웹 페이지가 웹 서버와 데이터를 주고 받을 때 활용된다.

	- 웹 애플리케이션 작성
		자바스크립트 언어로 활용할 수 있는 많은 API를 제공하므로,
		웹 브라우저에서 실행되는 다양한 웹 애플리케이션을 개발할 수 있다.
---------------------------------------------------------------------------------------
자바스크립트를 작성할 수 있는 위치
	1. HTML 태그의 이벤트 리스너 속성에 작성
		HTML 태그에는 마우스가 클릭되거나 키보드의 키가 입력되는 등의 이벤트(반응)가 발생할 때,
		처리하는 코드를 등록하는 리스너 속성이 있다.
	
	2. <script></script> 태그 안에서 작성
		<head></head>, <body></body>, body 태그 밖 등 어디든 들어갈 수 있다.
		웹 페이지 내에서 여러 번 작성할 수 있다.

	3. .js 자바스크립트 파일에 작성
		자바스크립트 코드를 확장자가 .js인 별도의 파일로 저장하고,
		<script src=".js경로"></script>와 같이 가져온다.

	4. URL 부분에 작성
		<a>태그의 href 속성에도 자바스크립트 코드를 작성할 수 있다.
		하지만, href 속성에서 자바스크립트 코드를 작성할 때
		"javascript:"를 먼저 작성하고 뒤에 JS 코드를 작성한다.
----------------------------------------------------------------------------------------
데이터 타입과 변수
	1. 자바스크립트 식별자(이름)
		식별자(identifier)란 자바스크립트 개발자가 변수, 상수, 함수에 붙이는 이름을 의미한다.
		식별자를 만들 때 다음 규칙을 준수해야 한다.

		- 첫 번째 문자 : 알파벳, 언더바, $문자만 사용 가능
		- 두 번째이상 문자 : 알파벳, 언더바, 0-9, $사용 가능
		- 대소문자 구분 : data와 dAta는 다른 식별자이다.
		- 키워드(예약어) 사용 불가

	2. 문장 구분
		세미콜론으로 문장과 문장을 구분한다.
		한 줄에 한 문장만 있는 경우 세미콜론을 생략할 수 있다.
		하지만 헷갈리기 때문에 무조건 붙이기로 한다.	

		i = i + 1
		j = j + 1;
		k = k + 1; m = m + 1
		n = n + 1 p = p + 1(X)

	3. 주석
		1. 개발자와 소통하거나 코드에 대한 설명글을 작성할 때 사용한다.
		2. 지금 당장 쓰지 않는 코드를 번역하지 않기 위해서

		//	: 한 줄 주석, ctrl + /
		/**/	: 범위 주석, ctrl + shift + /

	4. 데이터 타입(typeof)
		- 숫자 타입(number): 42, 3.14, ...
		- 논리 타입(bool): true, false
		- 문자열 타입(string): "안녕", '하세요', "35", 'a', "A", ...
		- 객체 레퍼런스 타입(object): Object, Array, Math, Date, ...
		- undefined: 타입이 정해지지 않은 것을 의미한다.
		- null: 값이 정해지지 않은 것을 의미한다.

	5. 변수
		- var 키워드: 함수의 영역만 영역으로 판단한다.
		- let 키워드: 모든 영역을 영역으로 판단한다.

	6. 지역변수와 전역변수
		변수의 사용 범위(scope)에 따라서 전역변수(global)와 지역변수(local)로 나뉜다.
		전역변수: 함수 밖에 선언된 변수
		지역변수: 영역 안에 선언된 변수

	7. 변수를 사용하는 이유
		1. 반복되는 값을 쉽게 관리하기 위해서
		2. 의미 없는 값을 하나의 정보로 만들기 위해서(자료구조)

	8. 상수
		- const 키워드: 값을 변경시킬 수 없다.

	9. 상수를 사용하는 이유
		값에 의미부여를 하기 위해서
==========================================================================================
함수
	이름 뒤에 소괄호.
	단, 키워드 뒤에 소괄호는 함수가 아니다.
	★ 함수는 저장공간이다.

	f	(x)	=	2x + 1;
	함수명	매개		리턴값
		변수

함수 선언
	function 함수명(매개변수, ...){
		실행할 문장;
		return 리턴값;
	}

함수 선언 순서
	문제) 두 정수의 덧셈 메소드 선언

	1. 함수의 이름을 생각한다.
		function add(){}

	2. 매개변수를 생각한다.
		function add(number1, number2){}

	3. 실행할 문장을 생각한다.
		function add(number1, number2){
			const result = number1 + number;
		}

	4. 리턴값을 생각한다.
		function add(number1, number2){
			const result = number1 + number;
			return result;
		}

함수 주의사항
	함수 이름은 동사로 작성한다.
	매개변수는 생략할 수 있지만, 생략하면 외부에서 값을 받아올 수 없다.
	리턴을 생략할 수 있지만, 생략하면 사용한 부분을 값으로 봐서는 안된다.

함수의 선언과 사용
	{}가 있으면 선언이고, {}가 없으면 사용이다.

함수의 목적
	1. 재사용(모듈화), 특정성을 부여해서는 안된다.
	2. 간결화

















